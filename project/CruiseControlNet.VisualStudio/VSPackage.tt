<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<#
	XNamespace ns = "http://schemas.microsoft.com/VisualStudio/2005-10-18/CommandTable";
	var path = this.Host.ResolvePath("VSPackage.vsct");
	var xml = XDocument.Load(path);
#>
namespace CruiseControlNet.VisualStudio
{
    using System;

    /// <summary>
    /// The identifiers from the command table.
    /// </summary>
	public static class CommandTableIdentifiers
	{
<#
	foreach (var id in xml.Descendants(ns + "IDSymbol"))
	{
		var nameAttr = id.Attribute("name");
		var valueAttr = id.Attribute("value");
		if ((nameAttr != null) && (valueAttr != null))
		{ #>
        /// <summary>
        /// ID value for <#=nameAttr.Value #>.
        /// </summary>
		public const uint <#=nameAttr.Value #> = <#=valueAttr.Value #>;

<#		}
	}
#>
	}

    /// <summary>
    /// The strings from the command table.
    /// </summary>
	public static class CommandTableStrings
	{
<#
	foreach (var id in xml.Descendants(ns + "GuidSymbol"))
	{
		var nameAttr = id.Attribute("name");
		var valueAttr = id.Attribute("value");
		if ((nameAttr != null) && (valueAttr != null))
		{ #>
        /// <summary>
        /// ID value for <#=nameAttr.Value #>.
        /// </summary>
		public const string <#=nameAttr.Value #> = "<#=this.CleanGuid(valueAttr.Value) #>";

<#		}
	}
#>
	}

    /// <summary>
    /// The GUIDs from the command table.
    /// </summary>
	public static class CommandTableGuids
	{
<#
	foreach (var id in xml.Descendants(ns + "GuidSymbol"))
	{
		var nameAttr = id.Attribute("name");
		var valueAttr = id.Attribute("value");
		if ((nameAttr != null) && (valueAttr != null))
		{ #>
        /// <summary>
        /// ID value for <#=nameAttr.Value #>.
        /// </summary>
		public static readonly Guid <#=nameAttr.Value #> = new Guid(CommandTableStrings.<#=nameAttr.Value #>);

<#		}
	}
#>
	}
}
<#+
	public string CleanGuid(string value)
	{
		if (value.StartsWith("{") && value.EndsWith("}"))
		{
			return value.Substring(1, value.Length - 2);
		}

		return value;
	}
#>